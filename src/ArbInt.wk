#>
# Source Code for the Arbitrary Integer Library for the
# Programming Language Wake
#
# ArbInt.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Nathan Fairhurst
# Revised By:
#
##

every ArbInt is:
	
	//ArbInt is an Integer of Arbitrary Size.  It is stored as a Little Endian array of Nums
	//with 32(?) bit words (and the nums themselves are big endian).
	//All ArbInts are signed with the twos compliment method.

	needs Num[] words, ArbIntBitManipulator bitManip;
	
	provides ArbInt <- ArbInt(?Num[]);
	
	with Num leftBit = 1 << 31;										//FORCES 32 BIT
	with Num rightBit = 1;
	
	
	ArbInt -- add(ArbInt other) {
		return ArbInt(bitManip.removePadding(bitManip.add(words, other.getWords()))) from this;
	}
	
	ArbInt -- mult(ArbInt other) {
		return ArbInt(bitManip.removePadding(bitManip.mult(words, other.getWords()))) from this;
	}
	
	ArbInt -- bitNot() {
		return ArbInt(bitManip.not(words)) from this;
	}
	
	ArbInt -- bitAnd(ArbInt other) {
		return ArbInt(bitManip.removePadding(bitManip.bitAnd(words, other.getWords()))) from this;
	}
	
	ArbInt -- bitOr(ArbInt other) {
		return ArbInt(bitManip.removePadding(bitManip.bitOr(words, other.getWords()))) from this;
	}
	
	ArbInt -- bitXor(ArbInt other) {
		return ArbInt(bitManip.removePadding(bitManip.bitXor(words, other.getWords()))) from this;
	}
	
	ArbInt -- shiftRight(Num amount) {
		return ArbInt(bitManip.removePadding(bitManip.shiftRight(words, amount))) from this;
	}
	
	ArbInt -- shiftLeft(Num amount) {
		return ArbInt(bitManip.removePadding(bitManip.shiftLeft(words, amount))) from this;
	}
	
	Num -- wordCount() {
		return Num[].getSize();
	}

	Num[] -- getWords() {
		return Num[];
	}
	
	Num? -- toNum() {
		return toString().parseNum();
	}
	
	Text -- toString() {
		return ArbInt(bitManip.toString(Num[])) from this;
	}