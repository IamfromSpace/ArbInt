#>
# Source Code for the Arbitrary Integer Library for the
# Programming Language Wake
#
# ArbIntBitManipulator.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Nathan Fairhurst
# Revised By: Michael Fairhurst
#
##

module arb;

every ArbIntBitManipulator is:

	with Int leftBit = 1 << 31;										//FORCES 32 BIT
	with Int rightBit = 1;

	Int[] -- add(Int[] a, Int[] b) {
		//Addition with only bitwise operators is fairly simple
		//First, a ^ b naively sums a, b, but ignores when the 1 is carried.
		//Then, (a & b) << 1 is the carried result, previously ignored.
		//Then this processes is repeated, adding our naive sum and our carry result
		//We iterate until there's nothing to carry, and we're done!
		//It does get a bit more complicated when we need to manage multiple words...

		var sum Int[] = [];
		var carry Int[] = [];
		var prevSum Int[] = [];

		var i = 0;
		var j = 0;

		//First, determine the largest ArbInt, we'll need to make all our ArbInts this size + 1
		var mostWords = a.getSize().orMaxOf(b.getSize());

		//Create prevSum and get our first sum & carry result (don't bitshift carry)
		for (i = 0; i < mostWords; i += 1) {
			if (i >= a.getSize()) {
				if ((leftBit & a[a.getSize()-1]) == leftBit) {
					sum.push(~b[i]);
					carry.push(b[i]);
				} else {
					sum.push(b[i]);
					carry.push(0);
				}
			} else if (i >= b.getSize()) {
				if ((leftBit & b[b.getSize()-1]) == leftBit) {
					sum.push(~a[i]);
					carry.push(a[i]);
				} else {
					sum.push(a[i]);
					carry.push(0);
				}
			} else {
				sum.push(a[i] ^ b[i]);
				carry.push(a[i] & b[i]);
			}
			prevSum.push(0);
		}

		//add one extra word in case of overflow (ex 1000 + 1000 = 0000 0001)
		//the extra word needs to be filled with the sign of the number
		//so its value will not be altered.
		if ((leftBit & sum[mostWords - 1]) == leftBit) {
			sum.push(-1);
		} else {
			sum.push(0);
		}
		if ((leftBit & carry[mostWords - 1]) == leftBit) {
			carry.push(-1);
		} else {
			carry.push(0);
		}
		prevSum.push(0);

		//for each carry word, starting at the smallest
		for (i = 0; i <= mostWords; i+=1) {
			//continue adding and carrying until the next smallest carry word is zero
			while (carry[i] != 0) {
				//bitshifting the carry must move the left bit of the smaller word into
				//the larger carry word's right bit after it itself has been bitshifted
				//iterate in reverse so nothing is lost.
				for (j = mostWords; j >= i; j-=1) {
					carry[j] = carry[j] << 1;
					if (((j != i) && (leftBit & carry[j-1]) == leftBit)) {
						carry[j] = carry[j] | rightBit;
					}
				}

				//sum and carry each word that isn't finished
				//but don't bitshift the carry yet
				for (j = i; j <= mostWords; j+=1) {
					prevSum[j] = sum[j];
					sum[j] = prevSum[j] ^ carry[j];
					carry[j] = prevSum[j] & carry[j];
				}
			}
		}

		return sum;
	}

	Int[] -- mult(Int[] a, Int[] b) {
		var i = 0;
		var j = 0;
		var testBit = 0;

		var result = [0];

		for (i=0; i<a.getSize(); i+=1) {
			for (j=0; j<32; j+=1) {
				testBit = 1 << j;
				if ((a[i] & testBit) == testBit) {
					result = add(result, shiftLeft(b, 32*i + j));
				}
			}
		}

		return result;
	}

	Int[] -- bitNot(Int[]) {
		var $Int[] = [];
		for (var i=0; i<Int[].getSize();i+=1) {
			$Int[].push(~Int[i]);
		}
		return $Int[];
	}

	//Bug where -1 is accessed in a list
	Int[] -- bitGate(Int[], $Int[], Int -- fn(Int, Int) op) {
		//Uses Closures for code reuse.  Intended for any two input bitwise logic gate.
		var i = 0;

		var Int[] a = [];
		var Int[] b = [];
		var Int[] result = [];

		if (Int[].getSize() >= $Int[].getSize()) {
			a = Int[];
			b = $Int[];
		} else {
			a = $Int[];
			b = Int[];
		}

		var mostWords = a.getSize();

		var pad = 0;
		if ((b[b.getSize()-1] & leftBit) == leftBit) {
			pad = -1;
		}

		for (i=0; i<mostWords; i+=1) {
			if (i < b.getSize()) {
				result.push(op(a[i], b[i]));
			} else {
				result.push(op(a[i], pad));
			}
		}

		return result;
	}

	Int[] -- bitAnd(Int[], $Int[]) {
		return bitGate(Int[], $Int[], {a, b => a & b});
	}

	Int[] -- bitOr(Int[], $Int[]) {
		return bitGate(Int[], $Int[], {a, b => a | b});
	}

	Int[] -- bitXor(Int[], $Int[]) {
		return bitGate(Int[], $Int[], {a, b => a ^ b});
	}

	Int[] -- shiftRight(Int[], Int amount) {
		var i = 0;

		var Int[] shifted = [];

		var pad = 0;
		if ((leftBit & Int[Int[].getSize() - 1]) == leftBit) {
			pad = -1;
		}

		var wordShift = amount >> 5;							//FORCES 32 BIT
		if (wordShift < Int[].getSize()) {
			var bitShift = amount % 32;							//FORCES 32 BIT
			var opBitShift = 0;
			var mask = 0;
			if (bitShift != 0) {
				opBitShift = 32 - bitShift;
				mask = ~(-1 << (opBitShift));
			}

			for (i=0; i<Int[].getSize(); i+=1) {
				shifted.push(Int[i]);
			}

			shifted.push(pad);

			for (i=0; i<Int[].getSize()-wordShift; i+=1) {
				shifted[i] = (shifted[i+wordShift] >> bitShift) & mask;
				shifted[i] = shifted[i] | (shifted[i+wordShift+1] << (opBitShift));
			}
			for (i=Int[].getSize()-wordShift; i<Int[].getSize(); i+=1) {
				shifted[i] = pad;
			}
		} else {
			shifted = [pad];
		}

		return shifted;
	}

	//Bug where -1 is accessed in a list
	Int[] -- shiftLeft(Int[], Int amount) {
		var i = 0;

		var Int[] shifted = [];

		var pad = 0;
		if ((leftBit & Int[Int[].getSize() - 1]) == leftBit) {
			pad = -1;
		}

		var wordShift = amount >> 5;							//FORCES 32 BIT
		var bitShift = amount % 32;								//FORCES 32 BIT
		var mask = ~(-1 << bitShift);
		var opBitShift = 0;
		if (bitShift !=0) {
			opBitShift = 32 - bitShift;
		}

		for (i=0; i<Int[].getSize(); i+=1) {
			shifted.push(Int[i]);
		}

		for (i=0; i<wordShift+1; i+=1) {
			shifted.push(pad);
		}

		for (i=shifted.getSize()-1; i>=wordShift+1; i-=1) {
			shifted[i] = shifted[i-wordShift] << bitShift;
			shifted[i] = shifted[i] | ((shifted[i-wordShift-1] >> opBitShift) & mask);
		}
		shifted[wordShift] = shifted[0] << bitShift;

		for (i=wordShift-1; i>=0; i-=1) {
			shifted[i] = 0;
		}

		return shifted;
	}

	Int[] -- removePadding(Int[]) {
		var i = 0;

		var wordCount = Int[].getSize();
		var Int[] result = [];

		//Crop off any unecessary words that contain all 0s or all 1s
		if ((Int[wordCount - 1] == -1) || (Int[wordCount - 1] == 0)) {
			var chopAt = 0;
			for (i = wordCount -1; i >= 0; i-=1) {
				if ((Int[i] != Int[wordCount-1])) {
					//Be sure that the "unecessary" word doesn't contain the sign bit
					if (((Int[i] ^ Int[wordCount - 1]) & leftBit) == leftBit) {
						chopAt = i+1;
					} else {
						chopAt = i;
					}
					break;
				}
			}
			for (i = 0; i <= chopAt; i+=1) {
				result.push(Int[i]);
			}
		}
		return result;
	}
