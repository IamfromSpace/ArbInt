#>
# Source Code for the Arbitrary Integer Library for the
# Programming Language Wake
#
# ArbIntTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Nathan Fairhurst
# Revised By:
#
##

import Asserts;
import ArbIntBitManipulator;

@TestClass
Every ArbIntBitManipulatorTest is:

	needs ArbIntBitManipulator aibm;

	@Test
	testRemovePadding(Asserts) {
		var Num[] a = [1,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(1);
		var Num[] a = [-2147483648,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(1);
		var Num[] a = [1,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(2);
		var Num[] a = [-2147483648,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(2);
		var Num[] a = [1,0,0,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(1);
		var Num[] a = [-2147483648,-1,-1,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(1);
		var Num[] a = [1,-1,-1,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(2);
		var Num[] a = [-2147483648,0,0,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(2);
		var Num[] a = [1,1,1,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(3);
		var Num[] a = [0,0,-2147483648,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(3);
		var Num[] a = [1,1,1,-1];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(4);
		var Num[] a = [0,0,-2147483648,0];
		a = aibm.BitremovePadding(a);
		Asserts.that(a.getSize())Equals(4);
	}